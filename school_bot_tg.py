import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import sqlalchemy as sa
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "7119373986:AAGg8OiAV2jhIPyqNjt9CHHtusMRKSAZtlE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (MySQL)
MYSQL_USER = "root"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL
MYSQL_PASSWORD = "LOLkek1488"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
MYSQL_HOST = "127.0.0.1"  # –•–æ—Å—Ç MySQL
MYSQL_DATABASE = "school_bot"  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
engine = sa.create_engine(
    f"mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}/{MYSQL_DATABASE}"
)
Session = sessionmaker(bind=engine)
Base = declarative_base()


# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = "users"
    id = sa.Column(sa.Integer, primary_key=True)
    telegram_id = sa.Column(sa.BigInteger, unique=True)
    phone_number = sa.Column(sa.String(20))
    role = sa.Column(sa.String(20))
    name = sa.Column(sa.String(100))
    grades = relationship("Grade", back_populates="student")
    homeworks = relationship("Homework", back_populates="student")


class Subject(Base):
    __tablename__ = "subjects"
    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(100))
    teacher_id = sa.Column(sa.Integer, sa.ForeignKey("users.id"))
    teacher = relationship("User")


class Grade(Base):
    __tablename__ = "grades"
    id = sa.Column(sa.Integer, primary_key=True)
    student_id = sa.Column(sa.Integer, sa.ForeignKey("users.id"))
    subject_id = sa.Column(sa.Integer, sa.ForeignKey("subjects.id"))
    grade = sa.Column(sa.Integer)
    semester = sa.Column(sa.Integer)
    date = sa.Column(sa.Date)
    student = relationship("User", back_populates="grades")
    subject = relationship("Subject")


class Schedule(Base):
    __tablename__ = "schedule"
    id = sa.Column(sa.Integer, primary_key=True)
    subject_id = sa.Column(sa.Integer, sa.ForeignKey("subjects.id"))
    day_of_week = sa.Column(sa.String(20))
    time = sa.Column(sa.String(10))
    location = sa.Column(sa.String(100))
    subject = relationship("Subject")


class Homework(Base):
    __tablename__ = "homework"
    id = sa.Column(sa.Integer, primary_key=True)
    subject_id = sa.Column(sa.Integer, sa.ForeignKey("subjects.id"))
    student_id = sa.Column(sa.Integer, sa.ForeignKey("users.id"))
    description = sa.Column(sa.Text)
    due_date = sa.Column(sa.Date)
    subject = relationship("Subject")
    student = relationship("User", back_populates="homeworks")


class Feedback(Base):
    __tablename__ = "feedback"
    id = sa.Column(sa.Integer, primary_key=True)
    user_id = sa.Column(sa.Integer, sa.ForeignKey("users.id"))
    message = sa.Column(sa.Text)
    created_at = sa.Column(sa.DateTime)
    user = relationship("User")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AuthStates(StatesGroup):
    waiting_for_phone = State()


class FeedbackStates(StatesGroup):
    waiting_for_message = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu(role):
    buttons = []
    if role == "student":
        buttons = [
            [KeyboardButton(text="–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏"), KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")]
        ]
    elif role == "teacher":
        buttons = [
            [KeyboardButton(text="–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")]
        ]
    elif role == "admin":
        buttons = [
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")]
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏–ª–∏ –Ω–µ–¥–µ–ª–∏
def get_schedule_inline_keyboard():
    days = [
        ("–ü–Ω", "monday"), ("–í—Ç", "tuesday"), ("–°—Ä", "wednesday"),
        ("–ß—Ç", "thursday"), ("–ü—Ç", "friday"), ("–°–±", "saturday"),
        ("–í—Å", "sunday")
    ]

    inline_keyboard = [
        [InlineKeyboardButton(text=day_label, callback_data=f"schedule_day_{day_value}") for day_label, day_value in days[i:i + 4]]
        for i in range(0, len(days), 4)
    ]

    inline_keyboard.append([InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="schedule_week")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    return keyboard


# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
def get_semester_inline_keyboard(semesters):
    inline_keyboard = [
        [InlineKeyboardButton(text=f"–°–µ–º–µ—Å—Ç—Ä {semester}", callback_data=f"grades_semester_{semester}")]
        for semester in sorted(semesters)
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    session = Session()
    print(f"Telegram ID –ø—Ä–∏ /start: {message.from_user.id}")
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if user:
        print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}, —Ä–æ–ª—å: {user.role}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}")
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!", reply_markup=get_main_menu(user.role))
        await state.update_data(phone_number=user.phone_number)
    else:
        phone_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[phone_button]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=keyboard)
        await state.set_state(AuthStates.waiting_for_phone)
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(AuthStates.waiting_for_phone)
async def process_phone_number(message: types.Message, state: FSMContext):
    if message.contact:
        session = Session()
        phone = message.contact.phone_number
        user = session.query(User).filter_by(phone_number=phone).first()
        if user:
            user.telegram_id = message.from_user.id
            session.commit()
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω telegram_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}: {user.telegram_id}")
            await message.answer(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {user.name}!", reply_markup=get_main_menu(user.role))
            await state.update_data(phone_number=phone)
        else:
            user = User(
                telegram_id=message.from_user.id,
                phone_number=phone,
                role="student",
                name=message.from_user.full_name
            )
            session.add(user)
            session.commit()
            print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}, telegram_id: {user.telegram_id}")
            await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=get_main_menu("student"))
            await state.update_data(phone_number=phone)
        session.close()
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
@dp.message(lambda message: message.text in ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])
async def show_schedule_options(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    if user and user.role in ["student", "teacher"]:
        today = datetime.now().strftime("%A").lower()
        if user.role == "student":
            schedules = session.query(Schedule).join(Subject).filter(Schedule.day_of_week == today).all()
        else:  # teacher
            schedules = session.query(Schedule).join(Subject).filter(Subject.teacher_id == user.id,
                                                                     Schedule.day_of_week == today).all()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        schedules = sorted(schedules, key=lambda x: x.time)

        if schedules:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today.capitalize()}:\n\n"
            for schedule in schedules:
                subject = session.get(Subject, schedule.subject_id)
                teacher = session.get(User, subject.teacher_id)
                response += f"üïí {schedule.time} ‚Äî {subject.name}\n"
                response += f"   üìç {schedule.location}, üë©‚Äçüè´ {teacher.name}\n\n"
        else:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today.capitalize()}:\n\n–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

        await message.answer(response, reply_markup=get_schedule_inline_keyboard())
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.")
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("schedule_"))
async def process_schedule_callback(callback_query: types.CallbackQuery, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()

    if not user or user.role not in ["student", "teacher"]:
        await callback_query.message.edit_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.")
        session.close()
        return

    callback_data = callback_query.data
    if callback_data == "schedule_week":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
        if user.role == "student":
            schedules = session.query(Schedule).join(Subject).all()
        else:  # teacher
            schedules = session.query(Schedule).join(Subject).filter(Subject.teacher_id == user.id).all()

        response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        for day, day_name in zip(days, day_names):
            day_schedules = [s for s in schedules if s.day_of_week == day]
            if day_schedules:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                day_schedules = sorted(day_schedules, key=lambda x: x.time)
                response += f"üìå {day_name}:\n"
                for schedule in day_schedules:
                    subject = session.get(Subject, schedule.subject_id)
                    teacher = session.get(User, subject.teacher_id)
                    response += f"üïí {schedule.time} ‚Äî {subject.name}\n"
                    response += f"   üìç {schedule.location}, üë©‚Äçüè´ {teacher.name}\n\n"

        if response == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n":
            response = "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç."
        await callback_query.message.edit_text(response, reply_markup=get_schedule_inline_keyboard())

    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        day = callback_data.split("_")[-1]
        day_names = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "friday": "–ü—è—Ç–Ω–∏—Ü–∞", "saturday": "–°—É–±–±–æ—Ç–∞", "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        if user.role == "student":
            schedules = session.query(Schedule).join(Subject).filter(Schedule.day_of_week == day).all()
        else:  # teacher
            schedules = session.query(Schedule).join(Subject).filter(Subject.teacher_id == user.id, Schedule.day_of_week == day).all()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        schedules = sorted(schedules, key=lambda x: x.time)

        if schedules:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_names[day]}:\n\n"
            for schedule in schedules:
                subject = session.get(Subject, schedule.subject_id)
                teacher = session.get(User, subject.teacher_id)
                response += f"üïí {schedule.time} ‚Äî {subject.name}\n"
                response += f"   üìç {schedule.location}, üë©‚Äçüè´ {teacher.name}\n\n"
        else:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_names[day]}:\n\n–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

        await callback_query.message.edit_text(response, reply_markup=get_schedule_inline_keyboard())

    session.close()
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ (–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
@dp.message(lambda message: message.text == "–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏")
async def show_grades(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    if user and user.role == "student":
        grades = session.query(Grade).filter_by(student_id=user.id).all()
        if not grades:
            await message.answer("üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n\n–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            session.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º–µ—Å—Ç—Ä–æ–≤
        semesters = set(grade.semester for grade in grades)
        if not semesters:
            await message.answer("üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n\n–°–µ–º–µ—Å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            session.close()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫:", reply_markup=get_semester_inline_keyboard(semesters))
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.callback_query(lambda c: c.data.startswith("grades_semester_"))
async def process_grades_semester_callback(callback_query: types.CallbackQuery, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()

    if not user or user.role != "student":
        await callback_query.message.edit_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.")
        session.close()
        return

    semester = int(callback_query.data.split("_")[-1])
    grades = session.query(Grade).filter_by(student_id=user.id, semester=semester).all()

    if not grades:
        response = f"üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞ {semester}-–π —Å–µ–º–µ—Å—Ç—Ä:\n\n–û—Ü–µ–Ω–æ–∫ –∑–∞ —ç—Ç–æ—Ç —Å–µ–º–µ—Å—Ç—Ä –Ω–µ—Ç."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        grades_by_subject = {}
        for grade in grades:
            subject = session.get(Subject, grade.subject_id)
            if subject.name not in grades_by_subject:
                grades_by_subject[subject.name] = []
            grades_by_subject[subject.name].append(grade)

        response = f"üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞ {semester}-–π —Å–µ–º–µ—Å—Ç—Ä:\n\n"
        for subject_name, subject_grades in sorted(grades_by_subject.items()):
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            subject_grades = sorted(subject_grades, key=lambda x: x.date)
            response += f"üü¶ {subject_name}:\n"
            for grade in subject_grades:
                response += f"{grade.grade} ({grade.date})\n"
            response += "\n"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫
    all_grades = session.query(Grade).filter_by(student_id=user.id).all()
    semesters = set(grade.semester for grade in all_grades)

    await callback_query.message.edit_text(response, reply_markup=get_semester_inline_keyboard(semesters))
    session.close()
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message(lambda message: message.text == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def show_homework(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    if user:
        if user.role == "student":
            homeworks = session.query(Homework).filter_by(student_id=user.id).all()
        elif user.role == "teacher":
            homeworks = session.query(Homework).join(Subject).filter(Subject.teacher_id == user.id).all()
        else:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.")
            session.close()
            return
        if homeworks:
            response = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n"
            for homework in homeworks:
                subject = session.get(Subject, homework.subject_id)
                response += f"{subject.name} (–¥–æ {homework.due_date}):\n"
                response += f"   {homework.description}\n\n"
        else:
            response = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç."
        await message.answer(response)
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)
@dp.message(lambda message: message.text == "–û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤")
async def show_students_grades(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    if user and user.role == "teacher":
        subjects = session.query(Subject).filter_by(teacher_id=user.id).all()
        if not subjects:
            await message.answer("üìä –û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫.")
            session.close()
            return

        response = "üìä –û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
        for subject in sorted(subjects, key=lambda x: x.name):
            grades = session.query(Grade).filter_by(subject_id=subject.id).all()
            if not grades:
                continue

            response += f"üü¶ {subject.name}:\n\n"
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫–∞–º
            grades_by_student = {}
            for grade in grades:
                student = session.get(User, grade.student_id)
                if student.name not in grades_by_student:
                    grades_by_student[student.name] = []
                grades_by_student[student.name].append(grade)

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
            for student_name, student_grades in sorted(grades_by_student.items()):
                response += f"üë§ {student_name}:\n"
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
                grades_by_semester = {}
                for grade in student_grades:
                    if grade.semester not in grades_by_semester:
                        grades_by_semester[grade.semester] = []
                    grades_by_semester[grade.semester].append(grade)

                for semester, semester_grades in sorted(grades_by_semester.items()):
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    semester_grades = sorted(semester_grades, key=lambda x: x.date)
                    grades_str = ", ".join(f"{grade.grade} ({grade.date})" for grade in semester_grades)
                    response += f"–°–µ–º–µ—Å—Ç—Ä {semester}: {grades_str}\n"
                response += "\n"

        if response == "üìä –û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n\n":
            response = "üìä –û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n\n–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        await message.answer(response)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º.")
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.message(lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def start_feedback(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(FeedbackStates.waiting_for_message)


@dp.message(FeedbackStates.waiting_for_message)
async def process_feedback(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    if user:
        feedback = Feedback(
            user_id=user.id,
            message=message.text,
            created_at=datetime.now()
        )
        session.add(feedback)
        session.commit()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        await state.clear()
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_users(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    print(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': phone_number={phone_number}, user={user.name if user else None}, role={user.role if user else None}")
    if user and user.role == "admin":
        users = session.query(User).all()
        if not users:
            await message.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            session.close()
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        users_by_role = {"admin": [], "teacher": [], "student": []}
        for u in users:
            users_by_role[u.role].append(u)

        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        if users_by_role["admin"]:
            response += "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
            for u in sorted(users_by_role["admin"], key=lambda x: x.id):
                response += f"üü¢ ID: {u.id} | {u.name} | {u.phone_number}\n"
            response += "\n"

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
        if users_by_role["teacher"]:
            response += "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n"
            for u in sorted(users_by_role["teacher"], key=lambda x: x.id):
                response += f"üü¢ ID: {u.id} | {u.name} | {u.phone_number}\n"
            response += "\n"

        # –°—Ç—É–¥–µ–Ω—Ç—ã
        if users_by_role["student"]:
            response += "üéì –°—Ç—É–¥–µ–Ω—Ç—ã:\n"
            for u in sorted(users_by_role["student"], key=lambda x: x.id):
                response += f"üü¢ ID: {u.id} | {u.name} | {u.phone_number}\n"

        await message.answer(response)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    session.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(lambda message: message.text == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def show_feedback(message: types.Message, state: FSMContext):
    session = Session()
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    user = session.query(User).filter_by(phone_number=phone_number).first()
    print(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è': phone_number={phone_number}, user={user.name if user else None}, role={user.role if user else None}")
    if user and user.role == "admin":
        feedbacks = session.query(Feedback).all()
        response = "üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n"
        for fb in feedbacks:
            fb_user = session.get(User, fb.user_id)
            response += f"–û—Ç {fb_user.name} ({fb.created_at}):\n"
            response += f"   {fb.message}\n\n"
        if response == "üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n":
            response = "üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        await message.answer(response)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    session.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())